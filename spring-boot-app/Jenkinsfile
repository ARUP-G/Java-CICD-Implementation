pipeline{
    agent{
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages{
        stage('checkout'){
            steps{
                 git credentialsId: 'github',
                 url: 'https://github.com/ARUP-G/Java-CICD-Implementation',
                 branch: 'main' 
                //sh 'echo passed'
            }    
        }
        stage('Build and Test'){
            steps{
                sh 'ls -ltr'
                // build project and JAR file
                sh 'cd spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://65.1.86.65:9000"
            }
            steps{
                withCredentials([string(credentialsId: 'sonarqube' , variable: 'SONAR_AUTH_TOKEN')]){
                    sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Build and push Dokcer image'){
            environment {
                DOCKER_IMAGE = "ard3dk/java-cicd:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps{
                script{
                    sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred"){
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Checkout K8S manifest SCM'){
            steps {
                git url: 'https://github.com/ARUP-G/Java-CICD-Implementation-Deployment-Manifest',
                branch: 'main'
            }
        }
        stage('Update Deployment File'){
            environment {
                GIT_REPO_NAME = "Java-CICD-Implementation-Deployment-Manifest"
                GIT_USER_NAME = "ARUP-G"
            }
            steps{
                script{
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "darup2019.xyz@gmail.com"
                        git config user.name "ARUP-G"
                        cd deploy
                        cat deployment.yml
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
                        cat deployment.yml
                        git add deployment.yml
                        git remote -v
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''      
                    }
                }
            }
        }
    }   
}
